{"version":3,"sources":["redux/Employees/employees.types.js","App.js","serviceWorker.js","redux/Employees/employees.reducer.js","redux/Clients/clients.types.js","redux/Clients/clients.reducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["updateNewEmployee","updateIsAddEmployeeClicked","updateEmployees","loading","className","DefaultLayout","React","lazy","Login","Register","Page404","Page500","App","Suspense","fallback","exact","path","name","render","props","Component","Boolean","window","location","hostname","match","INITIAL_STATE","count","newEmployee","isAddEmployeeCicked","employees","Id","fname","email","mob","reducer","state","action","type","payload","updateNewClient","updateIsAddClientClicked","updateClients","clients","Name","Country","newclient","isAddClientClicked","rootReducer","combineReducers","employeesReducer","clientsReducer","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47068206.chunk.js","sourcesContent":["export const updateNewEmployee = 'updateNewEmployee';\nexport const updateIsAddEmployeeClicked = 'updateIsAddEmployeeClicked';\nexport const updateEmployees = \"updateEmployees\";","import React, { Component } from 'react'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\nimport './scss/style.scss'\n\nconst loading = (\n  <div className=\"pt-3 text-center\">\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\n  </div>\n)\n\n// Containers\nconst DefaultLayout = React.lazy(() => import('./layout/DefaultLayout'))\n\n// Pages\nconst Login = React.lazy(() => import('./views/pages/login/Login'))\nconst Register = React.lazy(() => import('./views/pages/register/Register'))\nconst Page404 = React.lazy(() => import('./views/pages/page404/Page404'))\nconst Page500 = React.lazy(() => import('./views/pages/page500/Page500'))\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <React.Suspense fallback={loading}>\n          <Switch>\n            <Route exact path=\"/login\" name=\"Login Page\" render={(props) => <Login {...props} />} />\n            <Route\n              exact\n              path=\"/register\"\n              name=\"Register Page\"\n              render={(props) => <Register {...props} />}\n            />\n            \n            <Route exact path=\"/404\" name=\"Page 404\" render={(props) => <Page404 {...props} />} />\n            <Route exact path=\"/500\" name=\"Page 500\" render={(props) => <Page500 {...props} />} />\n            <Route path=\"/\" name=\"Home\" render={(props) => <DefaultLayout {...props} />} />\n          </Switch>\n        </React.Suspense>\n      </HashRouter>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import {  updateNewEmployee, updateIsAddEmployeeClicked, updateEmployees } from './employees.types';\n\n\nconst INITIAL_STATE = {\n\n\tcount: 0,\n\tnewEmployee: {},\n\tisAddEmployeeCicked: false,\n\temployees: [\n\n\t\t{ Id: 101, fname: 'Aysha', email: 'Lahore', mob: 12345 },\n\n\t\t{ Id: 102, fname: 'Asad', email: 'Lahore', mob: 23456, },\n\n\t\t{ Id: 103, fname: 'Mubashir', email: 'Lahore', mob: 34567 }\n\n\t]\n};\n\nconst reducer = (state = INITIAL_STATE, action) => {\n\n\tswitch (action.type) {\n\t\tcase updateNewEmployee:\n\n\t\t\treturn {\n\t\t\t\t...state, newEmployee: action.payload\n\n\t\t\t};\n\n\t\tcase updateEmployees:\n\n\t\t\treturn {\n\t\t\t\t...state, employees: action.payload\n\n\t\t\t};\n\n\t\tcase updateIsAddEmployeeClicked:\n\n\t\t\treturn {\n\t\t\t\t...state, isAddEmployeeCicked: action.payload\n\n\t\t\t};\n\n\t\tdefault: return state;\n\t}\n\n};\n\nexport default reducer;","export const updateNewClient = 'updateNewClients';\nexport const updateIsAddClientClicked = 'updateIsAddEmployeeClicked';\nexport const updateClients = \"updateClients\";","import {  updateNewClient, updateIsAddClientClicked, updateClients\n} from './clients.types';\n\nconst INITIAL_STATE = {\n\tclients: [\n\t\t{Id:201,Name:'Client 1',Country:'America'},\n\t\t{Id:202,Name:'Client 2',Country:'China'},\n\t\t{Id:203,Name:'Client 3',Country:'Russia'}\n\t],\n\tnewclient: {},\n\tisAddClientClicked:false\n};\n\nconst reducer = (state = INITIAL_STATE, action) => {\n\n\tswitch (action.type) {\n\t\tcase updateNewClient:\n\n\t\t\treturn {\n\t\t\t\t...state, newclient: action.payload\n\n\t\t\t};\n\n\t\tcase updateClients:\n\n\t\t\treturn {\n\t\t\t\t...state, clients: action.payload\n\n\t\t\t};\n\n\t\tcase updateIsAddClientClicked:\n\n\t\t\treturn {\n\t\t\t\t...state, isAddClientClicked: action.payload\n\n\t\t\t};\n\n\t\tdefault: return state;\n\t}\n\n};\n\nexport default reducer;","import { combineReducers } from 'redux';\n\n\nimport employeesReducer from './Employees/employees.reducer';\nimport clientsReducer from './Clients/clients.reducer'\n\nconst rootReducer = combineReducers({\n\n\temployees: employeesReducer,\n\tclients:clientsReducer\n\n});\n\nexport default rootReducer;","import { createStore } from 'redux'\nimport rootReducer from './rootReducer';\n\n\nconst store = createStore(rootReducer)\nexport default store\n","import 'react-app-polyfill/stable'\nimport 'core-js'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}